#!/usr/bin/env aptfile

log_info "Installing Repositories"
lsb_id=$(lsb_release -si)

function add-key-from-url-with-timeout {
  timeout=$1; shift
  url=$@
  timeout $timeout bash -c "wget -qO- \"$url\" | apt-key add -"
}

function package_from_url {
  [[ $TRACE ]] && set -x
  [[ -z $2 ]] && log_fail "Please specify a name and a download url to install the package from"
  name=$1
  url=$2
  if type curl >/dev/null 2>&1; then
        local dl_cmd="curl"
        local dl_options="-so"
    elif type wget >/dev/null 2>&1; then
        local dl_cmd="wget"
        local dl_options="-qO"
    else
        log_fail "Neither curl nor wget found. Unable to download $url"
    fi
  dpkg --force-confnew -s "$name" > "$TMP_APTFILE_LOGFILE" 2>&1 && log_info "${APTFILE_CYAN}[OK]${APTFILE_COLOR_OFF} package $name" && return 0
  tempdir=$(mktemp -d)
  $dl_cmd $dl_options $tempdir/${name}.deb $url \
    && apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -qq -y --force-yes install "$tempdir/${name}.deb"
  if [[ $? -ne 0 ]]; then 
    rm -r $tempdir
    log_fail "${APTFILE_RED}[FAIL]${APTFILE_COLOR_OFF} package $name"
  fi
  rm -r $tempdir
  log_info "${APTFILE_GREEN}[NEW]${APTFILE_COLOR_OFF} package $name"
}

function packagelist {
  [[ $TRACE ]] && set -x
  [[ -z $1 ]] && log_fail "Please specify at least one package to install"
  local input_packages=$@
  local install_packages=()
  for pkg in $input_packages; do
    dpkg --force-confnew -s "$pkg" > "$TMP_APTFILE_LOGFILE" 2>&1 && log_info "${APTFILE_CYAN}[OK]${APTFILE_COLOR_OFF} package $pkg" && continue
    install_packages+=($pkg)
  done
  if [[ ${#install_packages[@]} -gt 0 ]]; then
    apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -qq -y --force-yes install ${install_packages[@]}
    [[ $? -eq 0 ]] || log_fail "${APTFILE_RED}[FAIL]${APTFILE_COLOR_OFF} packages ${install_packages[@]}"
    log_info "${APTFILE_GREEN}[NEW]${APTFILE_COLOR_OFF} packages ${install_packages[@]}"
  fi
}


repository_file() {
  [[ $TRACE ]] && set -x
  [[ -z $2 ]] && log_fail "Please specify a filename and sourceline to setup"
  local repofile="$1"
  local repo="$2"
  # sourceline is not a complete repo configuration, needs modifying
  # i.e. not sourceline="deb http://domain.invalid/debian buster main extra"
  if [[ "$repo" != "deb "* ]]; then
    releasename=$(lsb_release -sc)
    if [[ "$repo" == *" "* ]]; then
      # Components given in sourceline, adding suite 
      # i.e. sourceline="http://domain.invalid/debian main"
      repo="deb ${repo/ / $releasename }"
    else
      # only URL given, adding suite and component
      # i.e. sourceline="http://domain.invalid/debian"
      repo="deb ${repo} $releasename main"
    fi
  fi

  if [[ "$repofile" != *.list ]]; then
    # Adding extension to enable parsing file
    repofile=${repofile}.list
  fi
  # Adding path
  repofile="/etc/apt/sources.list.d/$repofile"

  [[ -d "/etc/apt/sources.list.d" ]] || mkdir -p /etc/apt/sources.list.d

  grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep -Fq "$repo" && log_info "${APTFILE_CYAN}[OK]${APTFILE_COLOR_OFF} repository $repo" && return 0

  echo "Writing '$repo' to file '$repofile'" > "$TMP_APTFILE_LOGFILE"
  echo "$repo" >"$repofile" 2>> "$TMP_APTFILE_LOGFILE"
  [[ $? -eq 0 ]] || log_fail "${APTFILE_RED}[FAIL]${APTFILE_COLOR_OFF} repository $pkg"
  update
  log_info "${APTFILE_GREEN}[NEW]${APTFILE_COLOR_OFF} repository $repo"
}


add-key-from-url-with-timeout 5 https://updates.signal.org/desktop/apt/keys.asc
repository_file "signal" "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main"

add-key-from-url-with-timeout 5 https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_$(lsb_release -sr)/Release.key
repository_file "libcontainers.list" "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_$(lsb_release -sr)/ /"

add-key-from-url-with-timeout 5 https://packagecloud.io/github/git-lfs/gpgkey
repository_file "git-lfs" "https://packagecloud.io/github/git-lfs/${lsb_id,,}/ main"

# For mkusb
ppa mkusb/ppa

log_info "Updating"
update

debconf_selection "wireshark-common/install-setuid: true"

log_info "Installing packages"
packagelist \
  "ack" \
  "aisleriot" \
  "ansible" \
  "apg" \
  "audacity-data" \
  "audacity" \
  "autorandr" \
  "calibre" \
  "chromium-browser-l10n" \
  "chromium-browser" \
  "chromium-codecs-ffmpeg-extra" \
  "curl" \
  "default-jre" \
  "dialog" \
  "docker.io" \
  "evince" \
  "evolution-plugins" \
  "evolution-rss" \
  "evolution" \
  "exfat-fuse" \
  "exfat-utils" \
  "fancontrol" \
  "fasd" \
  "filezilla" \
  "flake8" \
  "fping" \
  "fslint" \
  "git-extras" \
  "git-lfs" \
  "gnucash" \
  "golang-go" \
  "gparted" \
  "hfsplus" \
  "htop" \
  "httpie" \
  "i3lock" \
  "iotop" \
  "ipxe-qemu" \
  "ipython" \
  "jq" \
  "kajongg" \
  "keepassxc" \
  "kmahjongg" \
  "ksudoku" \
  "libvirt-clients" \
  "libvirt-daemon" \
  "light-locker" \
  "mc" \
  "meld" \
  "mkusb" \
  "mkvtoolnix-gui" \
  "molly-guard" \
  "mtr" \
  "multitail" \
  "mysql-client" \
  "mysql-workbench" \
  "ncdu" \
  "ncftp" \
  "network-manager-openconnect-gnome" \
  "nfs-common" \
  "nmap" \
  "ntpdate" \
  "nut-monitor" \
  "nyx" \
  "pandoc" \
  "pcsc-tools" \
  "pcscd" \
  "pdftk" \
  "pdsh" \
  "picard" \
  "pigz" \
  "podman" \
  "pyflakes" \
  "pyflakes3" \
  "python3-pip" \
  "python3-virtualenv" \
  "qemu-kvm" \
  "qemu-utils" \
  "qrencode" \
  "samba-common" \
  "scanbd" \
  "scdaemon" \
  "sgabios" \
  "signal-desktop" \
  "smartmontools" \
  "solaar" \
  "sqlitebrowser" \
  "sshfs" \
  "sudoku" \
  "swaks" \
  "sweethome3d-furniture-nonfree" \
  "sweethome3d-furniture" \
  "sweethome3d-textures-editor" \
  "sweethome3d" \
  "terminology" \
  "tesseract-ocr-eng" \
  "tesseract-ocr-deu" \
  "tesseract-ocr-osd" \
  "tesseract-ocr" \
  "tex-common" \
  "texlive-base" \
  "tftp" \
  "torsocks" \
  "uget" \
  "unrar" \
  "vagrant-libvirt" \
  "vgabios" \
  "vim" \
  "virt-manager" \
  "virtualbox-dkms" \
  "virtualbox-qt" \
  "virtualenv" \
  "vlc" \
  "whois" \
  "wireshark-qt" \
  "wireshark" \
  "xautolock" \
  "xfce4-goodies" \
  "xsane" \
  "xsensors" \
  "xtightvncviewer" \
  "yamllint"

package_from_url "xnview" "https://download.xnview.com/XnViewMP-linux-x64.deb"
package_from_url "google-chrome-stable" "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
package_from_url "code" "https://go.microsoft.com/fwlink/?LinkID=760868"
