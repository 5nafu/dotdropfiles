#!/bin/bash

OPTIND=1 
daemonize=""
display="-display gtk"
monitor="-monitor vc"
persistent="-snapshot"
enable_cdrom=false
cdrom=""
CD="/var/lib/libvirt/images/debian-8.1.0-amd64-netinst.iso"
DISK="/var/lib/libvirt/images/LinuxTest.readonly.qcow"
order=dcn
usb_devices=()




show_help() {
    echo "Options:"
    echo "    -h This Help"
    echo "    -d Daemonize kvm"
    echo "    -t Display console as curses text"
    echo "    -v Display console via VNC"
    echo "    -p Persistent storage changes"
    echo "    -c Enable CDROM with default image (Debian 8.1 netinst)"
    echo "    -C <Image> Use this Image as CDROM (implies -c)"
    echo "    -D <Image> Use this Image as DISK"
    echo "    -b <order> Boot Order."
    echo "             n -> Netzwek"
    echo "             d -> CDROM"
    echo "             c -> first HDD"
    echo "             default: dcn"
    echo "    -u <device:identifier> attach given usb device to VM"
}

generate_usb_device() {
    identifier=$1
    usb_device=$(lsusb |grep "$identifier")
    if [[ -n "$usb_device" ]]; then
      echo "-usb -device usb-host,vendorid=0x${identifier%:*},productid=0x${identifier#*:}"
    fi
}

get_unused_port() {
    python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()'
}

while getopts "h?dtcvpD:C:b:u:" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    d)  daemonize="-daemonize"
        ;;
    t)  display="-curses"
        monitorport=$(get_unused_port)
        echo -e "To connect to the QEMU-Monitor run\ntelnet 127.0.0.1 $monitorport"
        read -p "Press ENTER to start the VM"
        monitor="-monitor telnet:127.0.0.1:$monitorport,server,nowait"
        ;;
    v)  display="-vnc :0,to=99"
        monitorport=$(get_unused_port)
        echo -e "To connect to the QEMU-Monitor run\ntelnet 127.0.0.1 $monitorport"
        monitor="-monitor telnet:127.0.0.1:$monitorport,server,nowait"
        ;;
    p)  persistent=""
        ;;
    c)  enable_cdrom=true
        ;;
    C)  enable_cdrom=true
        CD=$OPTARG
        ;;
    D)  DISK=$OPTARG
        ;;
    b)  order=$OPTARG
        ;;
    u)  usb_devices+=( "$(generate_usb_device $OPTARG)" )
    esac
done

#if [[ $display == "" ]]; then
#    echo "NO DISPLAY SET"
#    echo "You have to set at least one display option" 
#    show_help
#    exit 1
#fi
if [[ ! -f $DISK ]]; then
   echo "NO DISK present" >&2
   echo "No such file or directory: '$DISK'" >&2
   show_help
   exit 1
fi

if $enable_cdrom; then
    cdrom="-drive file=$CD,readonly=on,format=raw,media=cdrom"
fi
    # -net nic,model=virtio \
    # -net tap \
sudo /usr/bin/kvm \
    -boot order=$order \
    -cpu Haswell-noTSX-IBRS \
    -device ich9-usb-ehci1,id=usb,bus=pci.0,addr=0x5.0x7 \
    -device ich9-usb-uhci1,masterbus=usb.0,firstport=0,bus=pci.0,multifunction=on,addr=0x5 \
    -device ich9-usb-uhci2,masterbus=usb.0,firstport=2,bus=pci.0,addr=0x5.0x1 \
    -device ich9-usb-uhci3,masterbus=usb.0,firstport=4,bus=pci.0,addr=0x5.0x2 \
    -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x6 \
    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x7,drive=drive-virtio-disk0,id=virtio-disk0 \
    -drive file=$DISK,if=none,cache=writeback,id=drive-virtio-disk0 \
    $cdrom \
    -global kvm-pit.lost_tick_policy=delay \
    -global PIIX4_PM.disable_s3=1 \
    -global PIIX4_PM.disable_s4=1 \
    -m 8192 \
    -machine pc-i440fx-artful,accel=kvm,usb=off,vmport=off,dump-guest-core=off \
    $monitor \
    -name Buildtest \
    -netdev tap,id=n0 -device e1000,netdev=n0,mac=$(printf 'DE:AD:BE:EF:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256))) \
    -nodefaults \
    -rtc base=utc \
    -smp 6,sockets=6,cores=1,threads=1 \
    -device usb-tablet \
    -vga std \
    $persistent \
    $display \
    $daemonize \
    ${usb_devices[@]}
